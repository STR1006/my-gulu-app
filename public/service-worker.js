const CACHE_NAME = 'gulu-inventory-cache-v1';
const urlsToCache = [
  './', // Caches the root of the app (index.html)
  './index.html',
  './manifest.json',
  './service-worker.js', // Cache the service worker itself
  // Add your app's static assets here.
  // Vite will handle hashing for built assets, so for production,
  // you'd typically precache assets generated by the build process.
  // For development or simple cases, you can list public assets.
  // For icons, you'd need to create these files in your public/icons directory.
  './icons/icon-192x192.png',
  './icons/icon-512x512.png',
  './icons/icon-maskable-192x192.png',
  './icons/icon-maskable-512x512.png',
  // Note: /vite.svg is a default icon, you might want to replace it
  '/vite.svg' // This path will be prefixed by Vite's base
];

// Install event: caches the static assets
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then((cache) => {
        console.log('Opened cache');
        return cache.addAll(urlsToCache);
      })
      .catch(error => {
        console.error('Failed to cache during install:', error);
      })
  );
});

// Fetch event: serves cached content first, then falls back to network
self.addEventListener('fetch', (event) => {
  event.respondWith(
    caches.match(event.request)
      .then((response) => {
        // If the resource is in the cache, return it
        if (response) {
          return response;
        }
        // Otherwise, go to the network
        return fetch(event.request).then(
          (response) => {
            // Check if we received a valid response
            if (!response || response.status !== 200 || response.type !== 'basic') {
              return response;
            }

            // IMPORTANT: Clone the response. A response is a stream
            // and can only be consumed once. We must clone it so that
            // we can consume the stream twice: once for the cache and
            // once for the browser.
            const responseToCache = response.clone();

            caches.open(CACHE_NAME)
              .then((cache) => {
                cache.put(event.request, responseToCache);
              });

            return response;
          }
        );
      })
      .catch(error => {
        console.error('Fetch failed:', error);
        // You can return a custom offline page here if needed
        // return caches.match('/offline.html');
      })
  );
});

// Activate event: cleans up old caches
self.addEventListener('activate', (event) => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames.map((cacheName) => {
          if (cacheWhitelist.indexOf(cacheName) === -1) {
            // Delete old caches
            return caches.delete(cacheName);
          }
        })
      );
    })
  );
});
